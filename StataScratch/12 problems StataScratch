
Q1: Risky Projects (https://platform.stratascratch.com/coding/10304-risky-projects?code_type=1)
Logic: Join the three tables and group by the sum of salaries of employees for each project
Soln:
SELECT p.title,
       p.budget,
       Round(Sum(e.salary * Round(1.00 * ( p.end_date -
             p.start_date ) / 365, 2)), 0)
FROM   linkedin_projects p
       LEFT JOIN linkedin_emp_projects ep
              ON p.id = ep.project_id
       LEFT JOIN linkedin_employees e
              ON ep.emp_id = e.id
GROUP  BY p.title,
          p.budget
HAVING Sum(e.salary * Round(1.00 * ( p.end_date - p.start_date ) / 365, 2)) >
       p.budget
ORDER  BY p.title 
-------------------------------------------------------------------------------------------------------------------------------

Q2: Expensive Projects (https://platform.stratascratch.com/coding/10301-expensive-projects?code_type=1)
Logic: Join the two tables and group by the count of employees for each project
Soln:
WITH tab1
     AS (SELECT p.title         AS title,
                p.budget        AS budget,
                Count(e.emp_id) AS count1
         FROM   ms_projects p
                RIGHT JOIN ms_emp_projects e
                        ON p.id = e. project_id
         GROUP  BY 1,
                   2)
SELECT title,
       budget / count1
FROM   tab1
ORDER  BY 2 DESC 

-------------------------------------------------------------------------------------------------------------------------------

Q3: Finding Updated Records (https://platform.stratascratch.com/coding/10299-finding-updated-records?code_type=1)
Logic: super easy
Soln:
SELECT id,
       first_name,
       last_name,
       department_id,
       Max(salary)
FROM   ms_employee_salary
GROUP  BY 1,
          2,
          3,
          4
ORDER  BY 1

-------------------------------------------------------------------------------------------------------------------------------

Q4: Most Active Users On Messenger (https://platform.stratascratch.com/coding/10295-most-active-users-on-messenger?code_type=1)
Logic: you can use unpivot or union all. Since we need the duplicated thats why union all instead of union 
Soln:
WITH tab1 AS
(
         SELECT   user1          AS usernames,
                  Sum(msg_count) AS sm
         FROM     fb_messages
         GROUP BY 1
         UNION ALL
         SELECT   user2          AS usernames,
                  Sum(msg_count) AS sm
         FROM     fb_messages
         GROUP BY 1)
SELECT   usernames,
         Sum(sm)
FROM     tab1
GROUP BY 1
ORDER BY 2 DESC limit 10

---------------------------------------------------------------------

Q5: Most Profitable Companies
Soln:
SELECT company,
       profits
FROM   forbes_global_2010_2014
ORDER  BY profits DESC
LIMIT  3; 

------------------------------
Q6: Workers With The Highest Salaries
Soln:
SELECT t.worker_title
FROM   worker w
       LEFT JOIN title t
              ON w.worker_id = t.worker_ref_id
WHERE  w.salary = (SELECT Max(salary)
                   FROM   worker);
                   
------------------------------
Q7: Users By Average Session Time
Soln:
WITH tab1
     AS (SELECT user_id,
                Extract(day FROM timestamp) AS day,
                Max(CASE
                      WHEN action = 'page_load' THEN timestamp
                      ELSE NULL
                    END)                    AS LOAD,
                Min(CASE
                      WHEN action = 'page_exit' THEN timestamp
                      ELSE NULL
                    END)                    AS EXIT
         FROM   facebook_web_log
         GROUP  BY 1,
                   2)
SELECT user_id,
       Avg(EXIT - LOAD)
FROM   tab1
GROUP  BY 1
HAVING Avg(EXIT - LOAD) IS NOT NULL
ORDER  BY 1 

------------------------------
Q8: Activity Rank
Soln:
SELECT from_user,
       Count(from_user),
       Row_number()
         OVER(
           ORDER BY Count(from_user) DESC, from_user) AS rn
FROM   google_gmail_emails
GROUP  BY 1
ORDER  BY Count(from_user) DESC,
          from_user;
          
------------------------------
Q9: Dustance Travelled
Soln:
SELECT l.user_id,
       n.name,
       Sum(l.distance)
FROM   lyft_rides_log l
       LEFT JOIN lyft_users n
              ON l.user_id = n.id
GROUP  BY 1,
          2
ORDER  BY Sum(l.distance) DESC
LIMIT  10; 

------------------------------
Q10: Finding User Purchases
Soln:
WITH tab1
     AS (SELECT user_id,
                created_at,
                Lead(created_at, 1)
                  OVER(
                    partition BY user_id
                    ORDER BY created_at) AS new_date
         FROM   amazon_transactions)
SELECT user_id
FROM   tab1
GROUP  BY user_id
HAVING Min(new_date - created_at) BETWEEN 0 AND 7
ORDER  BY user_id

------------------------------
Q11: New Products
Soln:
SELECT company_name,
       Sum(CASE
             WHEN year = 2020 THEN 1
             ELSE 0
           END) - Sum(CASE
                        WHEN year = 2019 THEN 1
                        ELSE 0
                      END) AS y19
FROM   car_launches
GROUP  BY company_name;

------------------------------
Q12: Cities With The Most Expensive Homes
Soln:
SELECT city
FROM   zillow_transactions
GROUP  BY 1
HAVING Avg(mkt_price) > (SELECT Avg(mkt_price)
                         FROM   zillow_transactions)
ORDER  BY Avg(mkt_price) 

------------------------------ [ Instead of using CASE use {max(..) FILTER(WHERE ...)} ]
Q13: Salaries Differences
Soln:
SELECT Abs(Max(CASE
                 WHEN d.department = 'engineering' THEN e.salary
                 ELSE 0
               END) - Max(CASE
                            WHEN d.department = 'marketing' THEN e.salary
                            ELSE 0
                          END))
FROM   db_employee e
       LEFT JOIN db_dept d
              ON e.department_id = d.id 
















